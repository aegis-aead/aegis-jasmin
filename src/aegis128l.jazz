inline fn update(reg u128[8] st, reg u128 m0, reg u128 m1)
     -> reg u128[8]
{
    reg u128 t1 t2;
    t1 = #VPXOR(st[0], m0);
    t2 = #VPXOR(st[4], m1);
    reg u128 st7;
    st7 = st[7];
    st[7] = #VAESENC(st[6], st[7]);
    st[6] = #VAESENC(st[5], st[6]);
    st[5] = #VAESENC(st[4], st[5]);
    st[4] = #VAESENC(st[3], t2);
    st[3] = #VAESENC(st[2], st[3]);
    st[2] = #VAESENC(st[1], st[2]);
    st[1] = #VAESENC(st[0], st[1]);    
    st[0] = #VAESENC(st7, t1);
       
    return st;
}

inline fn absorb(reg u128[8] st, reg u128[2] t)
    -> reg u128[8]
{
    st = update(st, t[0], t[1]);

    return st;
}

inline fn enc(reg u128[8] st, reg u128[2] t)
    -> reg u128[8], reg u128[2]
{
    reg u128[2] out mask z;
    mask[0] = st[2] & st[3];
    mask[1] = st[6] & st[7];
    z[0] = st[6] ^ st[1];
    z[1] = st[2] ^ st[5];
    z[0] ^= mask[0];
    z[1] ^= mask[1];
    out[0] = t[0] ^ z[0];
    out[1] = t[1] ^ z[1];
    st = update(st, t[0], t[1]);

    return st, out;
}

inline fn dec(reg u128[8] st, reg u128[2] t)
    -> reg u128[8], reg u128[2]
{
    reg u128[2] out mask z;
    mask[0] = st[2] & st[3];
    mask[1] = st[6] & st[7];
    z[0] = st[6] ^ st[1];
    z[1] = st[2] ^ st[5];
    z[0] ^= mask[0];
    z[1] ^= mask[1];
    out[0] = t[0] ^ z[0];
    out[1] = t[1] ^ z[1];
    st = update(st, out[0], out[1]);

    return st, out;
}

inline fn declast(reg u128[8] st, reg u128[2] t, reg u64 left)
    -> reg u128[8], reg u128[2]
{
    reg u128[2] out mask z;
    mask[0] = st[2] & st[3];
    mask[1] = st[6] & st[7];
    z[0] = st[6] ^ st[1];
    z[1] = st[2] ^ st[5];
    z[0] ^= mask[0];
    z[1] ^= mask[1];
    out[0] = t[0] ^ z[0];
    out[1] = t[1] ^ z[1];

    stack u128[2] pad;
    pad[0] = out[0];
    pad[1] = out[1];
    reg u64 i;
    i = left;
    while (i < 32) {
        pad[u8(int) i] = 0;
        i += 1;
    }
    st = update(st, pad[0], pad[1]);

    return st, out;
}

inline fn init(reg u64 key_p, reg u64 nonce_p)
    -> reg u128[8]
{
    global u128 c0 c1;
    c0 = (16u8)[0x62, 0x79, 0xe9, 0x90, 0x59, 0x37, 0x22, 0x15, 0x0d, 0x08, 0x05, 0x03, 0x02, 0x01, 0x01, 0x00];
    c1 = (16u8)[0xdd, 0x28, 0xb5, 0x73, 0x42, 0x31, 0x11, 0x20, 0xf1, 0x2f, 0xc2, 0x6d, 0x55, 0x18, 0x3d, 0xdb];

    reg u128 k n;
    k = (u128)[key_p];
    n = (u128)[nonce_p];

    reg u128 kn kc0;

    kn = #VPXOR(k, n);
    kc0 = #VPXOR(k, c0);

    reg u128[8] st;
    st[0] = kn;
    st[1] = c1;
    st[2] = c0;
    st[3] = c1;
    st[4] = kn;
    st[5] = kc0;
    st[6] = #VPXOR(k, c1);
    st[7] = kc0;

    inline int i;
    for i = 0 to 10 {
        st = update(st, n, k);
    }
    return st;
}

inline fn finalize(reg u128[8] st, reg u64 tag_p, reg u8 tag_len,
                   reg u64 ad_len, reg u64 msg_len, reg u8 verify)
    -> reg u64
{
    stack u64[2] sizes;
    ad_len <<= 3;
    msg_len <<= 3;
    sizes[0] = ad_len;
    sizes[1] = msg_len;
    reg u128 t;
    t = st[2] ^ sizes[u128 0];

    inline int i;
    for i = 0 to 7 {
        st = update(st, t, t);
    }
    
    reg u64 ret;
    if (tag_len == 16) {
        reg u128 tag;
        tag = st[0] ^ st[1];
        tag ^= st[2];
        tag ^= st[3];
        tag ^= st[4];
        tag ^= st[5];
        tag ^= st[6];
        
        if (verify != 0) {
            reg u128 valid;
            valid = (u128)[tag_p];            
            valid = #VPCMPEQ_2u64(valid, tag);
            ret = #VPMOVMSKB_u128u64(valid);
            ret += 1;
            ret >>= 16;
            ret -= 1;            
        } else {
            (u128)[tag_p] = tag;
        }
    } else {
        reg u128[2] tag;
        tag[0] = st[0] ^ st[1];
        tag[1] = st[4] ^ st[5];        
        tag[0] ^= st[2];
        tag[1] ^= st[6];        
        tag[0] ^= st[3];
        tag[1] ^= st[7];
        
        if (verify != 0) {
            reg u128[2] valid;
            valid[0] = (u128)[tag_p];
            valid[1] = (u128)[tag_p + 16];
            valid[0] = #VPCMPEQ_2u64(valid[0], tag[0]);
            valid[1] = #VPCMPEQ_2u64(valid[1], tag[1]);
            valid[0] &= valid[1];
            ret = #VPMOVMSKB_u128u64(valid[0]);
            ret += 1;
            ret >>= 16;
            ret -= 1;
        } else {
            (u128)[tag_p] = tag[0];
            (u128)[tag_p + 16] = tag[1];
        }
    }
    inline int i;
    for i = 0 to 8 {
        st[i] = 0;
    }
    return ret;
}

export fn _aegis128l_encrypt(reg u64 params)
{
    reg u64 ct_p tag_p msg_p ad_p key_p nonce_p;
    stack u64 ad_len_ msg_len_;
    reg u8 tag_len;

    ct_p = (u64)[params + 8 * 0];
    // ignored: ct_len = (u64)[params + 8 * 1];
    tag_p = (u64)[params + 8 * 2];
    tag_len = (u8)[params + 8 * 3];
    msg_p = (u64)[params + 8 * 4];
    msg_len_ = (u64)[params + 8 * 5];
    ad_p = (u64)[params + 8 * 6];
    ad_len_ = (u64)[params + 8 * 7];
    key_p = (u64)[params + 8 * 8];
    nonce_p = (u64)[params + 8 * 9];

    reg u128[8] st;
    st = init(key_p, nonce_p);

    // ad

    reg u64 full_blocks;
    full_blocks = ad_len_;
    full_blocks = full_blocks & -32;

    reg u64 i;
    inline int j;

    i = #set0();
    while (i < full_blocks) {
        reg u128[2] t;
        t[0] = (u128)[ad_p + i];
        t[1] = (u128)[ad_p + i + 16];
        st = absorb(st, t);
        i += 32;
    }
    reg u64 left;
    left = ad_len_;
    left = left - i;

    if (left > 0) {
        ad_p = ad_p + i;

        stack u128[2] pad;
        reg u128 zero;
        zero = #set0_128();
        pad[0] = zero;
        pad[1] = zero;

        i = #set0();
        while (i < left) {
            pad[u8(int) i] = (u8)[ad_p + i];
            i += 1;
        }

        reg u128[2] t;
        t[0] = pad[0];
        t[1] = pad[1];

        st = absorb(st, t);
    }

    // message

    full_blocks = msg_len_;
    full_blocks = full_blocks & -32;

    reg u64 i;
    inline int j;

    i = #set0();
    while (i < full_blocks) {
        reg u128[2] t;
        t[0] = (u128)[msg_p + i];
        t[1] = (u128)[msg_p + i + 16];
        reg u128[2] out;
        st, out = enc(st, t);
        (u128)[ct_p + i] = out[0];
        (u128)[ct_p + i + 16] = out[1];
        i += 32;
    }

    left = msg_len_;
    left = left - i;
    if (left > 0) {
        msg_p = msg_p + i;
        ct_p = ct_p + i;

        stack u128[2] pad;
        reg u128 zero;
        zero = #set0_128();
        pad[0] = zero;
        pad[1] = zero;

        i = #set0();
        while (i < left) {
            pad[u8(int) i] = (u8)[msg_p + i];
            i += 1;
        }

        reg u128[2] t;
        t[0] = pad[0];
        t[1] = pad[1];

        reg u128[2] out;
        st, out = enc(st, t);
        pad[0] = out[0];
        pad[1] = out[1];

        i = #set0();
        while (i < left) {
            (u8)[ct_p + i] = pad[u8(int) i];
            i += 1;
        }
    }

    // finalize

    reg u64 ad_len msg_len;
    ad_len = ad_len_;
    msg_len = msg_len_;
    finalize(st, tag_p, tag_len, ad_len, msg_len, 0);
}

export fn _aegis128l_decrypt(reg u64 params)
    -> reg u64
{
    reg u64 ct_p tag_p msg_p ad_p key_p nonce_p;
    stack u64 ad_len_ ct_len_;
    reg u8 tag_len;

    ct_p = (u64)[params + 8 * 0];
    ct_len_ = (u64)[params + 8 * 1];
    tag_p = (u64)[params + 8 * 2];
    tag_len = (u8)[params + 8 * 3];
    msg_p = (u64)[params + 8 * 4];
    // ignored: msg_len_ = (u64)[params + 8 * 5];
    ad_p = (u64)[params + 8 * 6];
    ad_len_ = (u64)[params + 8 * 7];
    key_p = (u64)[params + 8 * 8];
    nonce_p = (u64)[params + 8 * 9];

    reg u128[8] st;
    st = init(key_p, nonce_p);

    // ad

    reg u64 full_blocks;
    full_blocks = ad_len_;
    full_blocks = full_blocks & -32;

    reg u64 i;
    inline int j;

    i = #set0();
    while (i < full_blocks) {
        reg u128[2] t;
        t[0] = (u128)[ad_p + i];
        t[1] = (u128)[ad_p + i + 16];
        st = absorb(st, t);
        i += 32;
    }
    reg u64 left;
    left = ad_len_;
    left = left - i;

    if (left > 0) {
        ad_p = ad_p + i;

        stack u128[2] pad;
        reg u128 zero;
        zero = #set0_128();
        pad[0] = zero;
        pad[1] = zero;

        i = #set0();
        while (i < left) {
            pad[u8(int) i] = (u8)[ad_p + i];
            i += 1;
        }

        reg u128[2] t;
        t[0] = pad[0];
        t[1] = pad[1];

        st = absorb(st, t);
    }

    // ciphertext

    full_blocks = ct_len_;
    full_blocks = full_blocks & -32;

    reg u64 i;
    inline int j;

    i = #set0();
    while (i < full_blocks) {
        reg u128[2] t;
        t[0] = (u128)[ct_p + i];
        t[1] = (u128)[ct_p + i + 16];
        reg u128[2] out;
        st, out = dec(st, t);
        (u128)[msg_p + i] = out[0];
        (u128)[msg_p + i + 16] = out[1];
        i += 32;
    }

    left = ct_len_;
    left = left - i;
    if (left > 0) {
        msg_p = msg_p + i;
        ct_p = ct_p + i;

        stack u128[2] pad;
        reg u128 zero;
        zero = #set0_128();
        pad[0] = zero;
        pad[1] = zero;

        i = #set0();
        while (i < left) {
            pad[u8(int) i] = (u8)[ct_p + i];
            i += 1;
        }

        reg u128[2] t;
        t[0] = pad[0];
        t[1] = pad[1];

        reg u128[2] out;
        st, out = declast(st, t, left);
        pad[0] = out[0];
        pad[1] = out[1];

        i = #set0();
        while (i < left) {
            (u8)[msg_p + i] = pad[u8(int) i];
            i += 1;
        }
    }

    // finalize

    reg u64 ad_len msg_len;
    ad_len = ad_len_;
    msg_len = ct_len_;
    
    reg u64 ret;    
    ret = finalize(st, tag_p, tag_len, ad_len, msg_len, 1);

    return ret;
}
